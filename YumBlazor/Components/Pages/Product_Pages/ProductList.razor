@page "/product"
@using YumBlazor.Data.Models
@using YumBlazor.Repository.IRepository
@using YumBlazor.Services.Extentions

@inject IProductRepository _productRepository
@inject IJSRuntime _JS

<_BsModal OnModalConfirmation="ConfirmDeleteClick"
          Title="Are you sure to delete this Product?"
          ButtonBootstrapStyle="btn-danger"
          ButtonText="Delete">
</_BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width:250px;">
                        <i class="bi bi-plus-square"></i> Add New Product
                    </a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Products)
                        {
                            <tr>
                                <td>
                                    @obj.Name
                                </td>
                                <td>
                                    @obj.Description
                                </td>
                                <td>
                                    @obj.Price
                                </td>
                                <td>
                                    @obj.Category.Name
                                </td>
                                <td>
                                    <a href="@($"product/update/{obj.Id}")" class="btn btn-primary">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                    <button class="btn btn-danger" @onclick="() => HandleDelete(obj.Id)">
                                        <i class="bi bi-trash3"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;

    private IEnumerable<Product> Products { get; set; } = new List<Product>();

    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteClick(bool IsConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if(IsConfirmed == true && DeleteProductId > 0)
        {
            var result = await _productRepository.DeleteAsync(DeleteProductId);
            if(result == true)
            {
                await _JS.ToastrSuccess("Product Deleted Successfully.");
            }
            else
            {
                await _JS.ToastrError("Error Encountered While Deleting.");
            }
            await LoadProducts();
        }
        DeleteProductId = 0;
        IsProcessing = false;
    }
}
